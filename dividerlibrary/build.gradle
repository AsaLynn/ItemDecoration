apply plugin: 'com.novoda.bintray-release'//添加bintray插件
apply plugin: 'com.android.library'
android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    api 'com.yanyusong.y_divideritemdecoration:y_divideritemdecoration:2.0'
}
configurations.all { //循环一个个的依赖库
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested //获取当前循环到的依赖库
        if (requested.group == 'com.android.support') {//如果这个依赖库群组的名字是com.android.support
            if (!requested.name.startsWith("multidex")) { //且其名字不是以multidex开头的
                details.useVersion '28.0.0'//这里指定需要统一的依赖版本
            }
        }
    }
}
//添加配置
publish {
    userOrg = 'zhang721688'      //bintray注册的用户名
    repoName = 'MyItemDecoration'//Binary上的刚才新建的仓库名（Repository）
    groupId = 'com.zxn.divider'         //compile引用时的第1部分groupId
    artifactId = 'dividerlibrary'     //compile引用时的第2部分项目名, // 依赖名compile 'x:y:z'中的项目名y
    publishVersion = '1.0.0'    //compile引用时的第3部分版本号,依赖名compile 'x:y:z'中的版本号z
    desc = 'This is a library for recyclerview item'
    website = 'https://github.com/zhang721688/MyItemDecoration'// VCS地址，即填写项目上传的Github地址
}

// 特别注意：保持你的library module的名字同artifactId一样
// 1. 背景
// 在Bintray上你的项目的maven-metadata.xml文件的路径=gruopId+"/"+module名称
// 如你的groupId=scut.carson_ho，artifactId是CircileView，但module名称是circlelibrary
// 此时，项目文件在scut.carson_ho.CircileView目录下的，但maven-metadata.xml文件却是在scut.carson_ho.circlelibrary目录下的。
// 2. 冲突：若你有多个项目groupId一样 & artifactId不一样，但module名称都是library的话，maven-metadata.xml文件的地址可能会一样，即都是：gruopId+"/"+module名称，那么就可能产生冲突
// 3. 解决方案：保持module名称和artifactId一致

