apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    api 'com.yanyusong.y_divideritemdecoration:y_divideritemdecoration:2.0'
}
//项目主页
def siteUrl = 'https://github.com/zhang721688/MyItemDecoration'
//项目的git地址
def gitUrl = 'https://github.com/zhang721688/MyItemDecoration.git'
//发布到JCenter上的项目名字,RvDivider
def libName = "RvDivider"
//发布到组织名称名字，必须填写
group = "com.zxn.divider"
// 版本号，下次更新是只需要更改版本号即可
version = "1.0.0"
//上面配置后上传至JCenter后的编译路径是这样的： compile 'com.zxn.zatlib.RvDivider:library:1.0.0'
//生成源文件
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
//生成Javadoc文档
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
//文档打包成jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
//拷贝javadoc文件
task copyDoc(type: Copy) {
    from "${buildDir}/docs/"
    into "docs"
}
//上传到JCenter所需要的源码文件
artifacts {
    archives javadocJar
    archives sourcesJar
}
// 配置maven库，生成POM.xml文件
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                //项目描述，随意填
                name 'A diveder lib for recyclerview.'
                url siteUrl
                licenses {
                    license {
                        //开源协议
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        //开发者的个人信息
                        id 'zxn'
                        name 'ZhangXiaoNing'
                        email 'zxn13716071676@sina.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}
//上传到JCenter
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")    //读取 local.properties 文件里面的 bintray.user
    key = properties.getProperty("bintray.apikey")   //读取 local.properties 文件里面的 bintray.apikey
    configurations = ['archives']
    pkg {
        //这里的repo值必须要和你创建Maven仓库的时候的名字一样
        repo = "MyItemDecoration"
        //发布到JCenter上的项目名字
        name = libName
        //项目描述
        desc = 'A diveder lib for recyclerview..'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

javadoc {
    options{
        //如果你的项目里面有中文注释的话，必须将格式设置为UTF-8，不然会出现乱码
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}











/*configurations.all { //循环一个个的依赖库
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested //获取当前循环到的依赖库
        if (requested.group == 'com.android.support') {//如果这个依赖库群组的名字是com.android.support
            if (!requested.name.startsWith("multidex")) { //且其名字不是以multidex开头的
                details.useVersion '28.0.0'//这里指定需要统一的依赖版本
            }
        }
    }
}*/
////添加配置
//publish {
//    userOrg = 'zhang721688'      //bintray注册的用户名
//    repoName = 'MyItemDecoration'//Binary上的刚才新建的仓库名（Repository）
//    groupId = 'com.zxn.divider'         //compile引用时的第1部分groupId
//    artifactId = 'dividerlibrary'     //compile引用时的第2部分项目名, // 依赖名compile 'x:y:z'中的项目名y
//    publishVersion = '1.0.0'    //compile引用时的第3部分版本号,依赖名compile 'x:y:z'中的版本号z
//    desc = 'This is a library for recyclerview item'
//    website = 'https://github.com/zhang721688/MyItemDecoration'// VCS地址，即填写项目上传的Github地址
//}

// 特别注意：保持你的library module的名字同artifactId一样
// 1. 背景
// 在Bintray上你的项目的maven-metadata.xml文件的路径=gruopId+"/"+module名称
// 如你的groupId=scut.carson_ho，artifactId是CircileView，但module名称是circlelibrary
// 此时，项目文件在scut.carson_ho.CircileView目录下的，但maven-metadata.xml文件却是在scut.carson_ho.circlelibrary目录下的。
// 2. 冲突：若你有多个项目groupId一样 & artifactId不一样，但module名称都是library的话，maven-metadata.xml文件的地址可能会一样，即都是：gruopId+"/"+module名称，那么就可能产生冲突
// 3. 解决方案：保持module名称和artifactId一致

